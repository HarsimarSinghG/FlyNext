generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        String    @id @default(uuid())
  name      String    
  country   String
  airports  Airport[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Unique constraint to prevent duplicate cities in the same country
  @@unique([name, country], name: "nameCountry")
}

model Airport {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  city       String
  country    String
  cityId     String?
  cityRef    City?    @relation(fields: [cityId], references: [id])
  afsId      String?  // Original ID from AFS API
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  firstName         String
  lastName          String
  passportNumber    String?   // Added passport number field
  profilePictureUrl String?
  phoneNumber       String?
  role              Role      @default(user)
  hotels            Hotel[]
  bookings          Booking[]
  notifications     Notification[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Hotel {
  id          String      @id @default(uuid())
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String
  address     String
  latitude    Float
  longitude   Float
  starRating  Int
  logoUrl     String?
  images      Json
  roomTypes   RoomType[]
  bookings    HotelBooking[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model RoomType {
  id              String    @id @default(uuid())
  hotelId         String
  hotel           Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String
  amenities       Json
  pricePerNight   Float
  images          Json
  baseAvailability Int
  availability    RoomAvailability[]
  bookings        HotelBooking[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RoomAvailability {
  id              String    @id @default(uuid())
  roomTypeId      String
  roomType        RoomType  @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date            DateTime
  availableRooms  Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Booking {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  totalPrice        Float
  paymentCardLast4  String
  paymentCardType   String
  paymentCardExpiry String
  status            BookingStatus   @default(pending)
  flightBookings    FlightBooking[]
  hotelBookings     HotelBooking[]
  invoice           Invoice?
  notifications     Notification[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model FlightBooking {
  id                  String    @id @default(uuid())
  bookingId           String
  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  afsFlightId         String
  departureAirportCode String
  arrivalAirportCode   String
  departureTime       DateTime
  arrivalTime         DateTime
  passengers          Json
  afsBookingReference String?   // Added field for AFS booking reference
  afsTicketNumber     String?   // Added field for AFS ticket number
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model HotelBooking {
  id              String    @id @default(uuid())
  bookingId       String
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hotelId         String
  hotel           Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomTypeId      String
  roomType        RoomType  @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkInDate     DateTime
  checkOutDate    DateTime
  numberOfRooms   Int
  totalPrice      Float
  status          BookingStatus @default(confirmed)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Notification {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message         String
  isRead          Boolean   @default(false)
  type            NotificationType
  relatedBookingId String?
  relatedBooking  Booking?  @relation(fields: [relatedBookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Invoice {
  id              String    @id @default(uuid())
  bookingId       String    @unique
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceNumber   String    @unique
  pdfUrl          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Role {
  user
  hotel_owner
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum NotificationType {
  booking_created
  booking_cancelled
  hotel_booking_cancelled
  new_reservation
}
